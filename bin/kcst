#!/bin/sh
#
#  kcst - k-mer counting sequence typer
#  Copyright (C) 2018  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Home: http://io.zwets.it/kcst

# Make sure sort and awk run predictably and fast
export LC_ALL="C"

# Constants
PROGNAME="$(basename "$0")"
TAB="$(printf '\t')"

# Defaults
KHC_EXE="$(realpath "$(dirname "$0")/khc")"
DB_DIR="$(realpath "$(dirname "$(realpath "$0")")/../data")"
PCT_COVER=90

# Function exits this script with $* on stderr
err_exit() {
    echo "${PROGNAME}: $*" >&2
    exit 1
}

# Function to perform the KHC query; args $* are added to its end.
# Output is scheme:gene:allele len hit cov
khc_query() {
    $KHC_EXE ${VERBOSE:+"-v"} -s -c $PCT_COVER "$MLST_DB" "$@"
}

# Function to process query output, which has 'scheme:gene:allele len hit cov' lines.
# Transforms into tab-separated 'scheme, gene, allele[*], cov', sorted on decreasing cov,
# then keeps only the highest cov line for each gene (can be multiple with same cov)
top_hits() {
    $GAWK_EXE -bO 'BEGIN { OFS="\t" }
        { match($1, "^(.*):(.*):([0-9]+)$", A); print A[1], A[2], A[3] ($4<100.0?"*":""), $4 }' |
    $SORT_EXE -t "$TAB" -k 1,2 -k 4,4nr |
    $GAWK_EXE -bO 'BEGIN { OFS=FS="\t" }
        $1 == P1 && $2 == P2 && $4 == P4 { print }
        $1 != P1 || $2 != P2 { P1 = $1; P2 = $2; P4 = $4; print }'
}

# Trickiest bit: take sorted list of top hits per scheme, pivot into profiles, look up ST
#
make_profiles() {
    $GAWK_EXE -bO -v CFG_FILE="$DB_DIR/mlst.cfg" -v TSV_FILE="$DB_DIR/mlst.tsv" -v QUERY_TITLE="$(basename "$QRY_FILE")" \
        --source '
        BEGIN {
            FS = OFS = "\t"
            while (getline <CFG_FILE) { # read table of scheme names and loci
                SCHEME_NAME[$1] = $2
                SCHEME_LOCI[$1][1]=0; delete SCHEME_LOCI[$1][1]
                N_SCHEME_LOCI[$1] = split($3, SCHEME_LOCI[$1], ",")
            }
            while (getline <TSV_FILE) { # read table of all profiles (for all schemes)
                KEY = $1
                for (I in SCHEME_LOCI[$1]) KEY = KEY "\t" $(I+2)
                ST_TABLE[KEY "$"] = $2
            }
        }
        # EVERY LINE
        {   # Collect the schemes that apply for this query, and all <scheme,locus,allele> combos
            SCHEMES[$1] = $1
            ALLELES[$1][$2][$3] = $3
        }
        END {   # Now unfold the vertical list of alleles into a list of horizontal profiles
                # The complexity is that each locus possibly has multiple alleles (so output is a productset)
            for (SCHEME in SCHEMES) {
                N_LOCI = N_SCHEME_LOCI[SCHEME]
                delete PROFILES
                profiles_from(1, PROFILES)  # Generates the list of profiles in PROFILES
                if (length(PROFILES)) {
                    printf "### " QUERY_TITLE OFS "ST"; for (L in SCHEME_LOCI[SCHEME]) printf OFS SCHEME_LOCI[SCHEME][L]; printf ORS
                    for (PROFILE in PROFILES)
                        print SCHEME_NAME[SCHEME], lookup_st(SCHEME, PROFILE), PROFILE
                }
            }
        }
        function profiles_from(I,PS,   AS,LH,RH,RHS)  # Recursively generates profile productset for SCHEME
        {                                             # Maybe best to look the other way, this burns the brain
            PS[1] = 0; delete PS[1]  # Awk idiom to make sure PS is array type
            if (isarray(ALLELES[SCHEME][SCHEME_LOCI[SCHEME][I]]))   # If there are multiple alleles at locus I
                if (I == N_LOCI)                                    # And we are looking at the rightmost locus
                    for (LH in ALLELES[SCHEME][SCHEME_LOCI[SCHEME][I]]) PS[LH] = LH
                else {                                              # Else we are looking before rightmost locus
                    profiles_from(I+1,RHS)                          # So tail recurse and return the set product
                    for (LH in ALLELES[SCHEME][SCHEME_LOCI[SCHEME][I]]) for (RH in RHS) PS[LH OFS RH] = LH OFS RH
                }
        }
        function lookup_st(S,P) # We turn profile P and scheme S into string "S<tab>P[1]<tab>P[2]<tab>...P[N]$"
        {                       # Which is just what we used at BEGIN to index into the ST_TABLE
            ST = ST_TABLE[S "\t" gensub("\\*", "", "g", P) "$"]     # Need to strip the stars out when looking up
            return (ST ? "ST" ST : "NF") gensub("[^*]","","g",P)    # And copy them onto the ST to mark non-100%
        }'
}


# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $PROGNAME [OPTIONS] FILE

  Determine species and MLST for the contigs, reads, or plain DNA in FILE.
  FILE must be FASTA, FASTQ, or plain DNA format, and may be gzip compressed.

  OPTIONS
   -c, --cov=COV    Minimum percentage allele coverage (default $PCT_COVER)
   -d, --dbdir=DIR  Path to the kcst MLST database directory (see below)
                    (default $DB_DIR)
   -x, --khc=KHC    Path to the khc binary, if not in bin directory or PATH
   -v, --verbose    Report progress on stderr

  The program outputs the species and sequence type (if found) corresponding
  to the combination of top scoring alleles for each gene.  Matches below 100%
  identity are marked with an asterisk (*).  Matches below COV are ignored.

  $PROGNAME uses the khc binary to do the k-mer counting.  khc must have been
  compiled and must be either on the PATH, or in the same directory with kcst,
  or specified with option --khc.

  The database directory DIR must have been previously set up according to the
  instructions in README.md.  More information: http://io.zwets.it/kcst.
" >&2
    exit ${1:-1}
}

# Parse options

unset VERBOSE
while [ $# -ne 0 -a "$(expr "$1" : '\(.\)..*')" = "-" ]; do
    case $1 in
    --db*=*)      DB_DIR="${1##--db*=}" ;;
    -d|--db*)     shift || usage_exit; DB_DIR="$1" ;;
    --cov*=*)     PCT_COVER="${1##--cover*=}" ;;
    -c|--cov*)    shift || usage_exit; PCT_COVER="$1" ;;
    --khc=*)      KHC_EXE="${1##--khc=}" ;;
    -x|--khc)     shift || usage_exit; KHC_EXE="$1" ;;
    -v|--verbose) VERBOSE=1 ;;
    -h|--help)    usage_exit 0 ;;
    *)            usage_exit ;;
    esac
    shift || usage_exit
done

# Check dependencies

# Functions checks that command '$1' is available, and sets $1_EXE to its path
check_deps() {
    while [ $# -gt 0 ]; do
        local VAR="$(echo "$1_EXE" | tr 'a-z' 'A-Z')"   # VAR = name of environment variable specifying path to $1
        local EXE="$(eval "echo \$$VAR")"               # EXE = value of VAR = user-specified path to $1
        local EXE="${EXE:-"$(command -v "$1")"}"        # If it was not set by user, then try the standard lookup
        [ -x "$EXE" ] ||
            err_exit "missing requirement: '$1'; either put it on PATH or export $VAR=/path/to/$1."
        eval "$VAR=$EXE"
        shift
    done
}

check_deps 'file' 'gawk' 'sort'

# Check arguments

# Check for KHC

KHC_EXE="${KHC_EXE:-"$(command -v khc)"}"
[ -x "$KHC_EXE" ] || err_exit "khc binary not found; compile it and use option -x or PATH"

# Check for database

[ -d "$DB_DIR" ] || err_exit "no such directory (use option -d): $DB_DIR"

MLST_DB="$DB_DIR/mlst.db"
MLST_CFG="$DB_DIR/mlst.cfg"
MLST_TSV="$DB_DIR/mlst.tsv"

[ -f "$MLST_DB" ] || err_exit "database file missing (use option -d): $MLST_DB"
[ -f "$MLST_CFG" ] || err_exit "database config file missing: $MLST_CFG"
[ -f "$MLST_TSV" ] || err_exit "database profile table missing: $MLST_TSV"
[ $# -gt 0 ] || usage_exit

# Do the work

case $# in
    0) QRY_FILE="-" ;;
    1) QRY_FILE="$1" ;;
    *) usage_exit ;;
esac

khc_query "$QRY_FILE" |
top_hits |
make_profiles

exit 0

# vim: sts=4:sw=4:et:si:ai

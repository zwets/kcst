# Adapted from the sample Makefile that comes with libgtest-dev on Ubuntu.
# 
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = ../gtest

# Where to find the code under test.
USER_DIR = ..

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
#
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11 -I$(USER_DIR)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = all-tests

# All Google Test headers.  Normally you shouldn't change this definition.
GTEST_HEADERS = /usr/include/gtest/*.h \
                /usr/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

test : all-tests
	./all-tests

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

USER_HEADERS = $(USER_DIR)/kmeriser.h

# Our objs

USER_OBJS = kmeriser.o kmerator.o baserator.o utils.o

utils.o : $(USER_DIR)/utils.cpp $(USER_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

baserator.o : $(USER_DIR)/baserator.cpp $(USER_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

kmerator.o : $(USER_DIR)/kmerator.cpp $(USER_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

kmeriser.o : $(USER_DIR)/kmeriser.cpp $(USER_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

# Our test objs

TEST_OBJS = kmeriser-test.o kmerator-test.o baserator-test.o

baserator-test.o : baserator-test.cpp $(USER_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

kmerator-test.o : kmerator-test.cpp $(USER_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

kmeriser-test.o : kmeriser-test.cpp $(USER_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

# Our executable

all-tests: $(TEST_OBJS) $(USER_OBJS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

